{
	"info": {
		"_postman_id": "dc7110d0-8eb0-47e0-9de9-414e7f180f5f",
		"name": "MedNet EDC API Collection",
		"description": "# MedNet EDC API Collection Documentation\n\n## About This API\nThe Mednet EDC REST API provides unified access to data stored within iMednet data services. It enables secure data retrieval using HTTP requests for Sponsors, CROs, and validated clients.\n\n## Base URL\n`https://edc.prod.imednetapi.com`\n\n## Authentication\nAll requests require the following headers:\n```json\n{\n  \"x-api-key\": \"your-imednet-supplied-api-key\",\n  \"x-imn-security-key\": \"your-imednet-supplied-security-key\",\n  \"Content-Type\": \"application/json\"\n}\n```\n\n## Status Codes\n- 200: OK - Request completed successfully\n- 400: Bad Request - Malformed request\n- 401: Unauthorized - Security issue with authentication\n- 403: Forbidden - Invalid studyKey\n- 404: Not Found - Resource not found\n- 429: Too Many Requests - Rate limit exceeded\n- 500: Internal Server Error - Unknown server error\n\n## Filtering\nThe API supports filtering with these operators:\n- `<`: Less than\n- `<=`: Less than or equal\n- `>`: Greater than\n- `>=`: Greater than or equal\n- `==`: Equal\n- `!=`: Not equal\n- `=~`: Contains (case-insensitive, supports regex)\n\nConnectors:\n- AND: `;` or `and`\n- OR: `,` or `or`\n\n## Date Handling\nDates are returned in UTC. Supported formats:\n- `YYYY-MM-DDTHH:MM:SSZ` (UTC)\n- `YYYY-MM-DDTHH:MM:SS-06:00` (with timezone)\n- `YYYY-MM-DD` (date only, specific to Visits)\n\n## Rate Limits\n- Maximum 100 requests per minute\n- Maximum 1000 requests per hour\n- Contact support for increased limits\n\n## Notes\n- Keep API keys confidential\n- Avoid CORS usage that could expose keys\n- All responses are in JSON format",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Study Setup",
			"item": [
				{
					"name": "Get Studies",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "studyKey,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Test whether request was successful",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has required structure\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('metadata');",
									"    pm.expect(response).to.have.property('pagination');",
									"    pm.expect(response).to.have.property('data');",
									"    pm.expect(response.data).to.be.an('array');",
									"});",
									"",
									"// Extract and set study_key from response if available",
									"pm.test(\"Extract study_key from response\", function () {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.length > 0) {",
									"        // Get first study_key from response",
									"        const firstStudy = response.data[0];",
									"        if (firstStudy.studyKey) {",
									"            pm.environment.set('study_key', firstStudy.studyKey);",
									"            console.log('Set study_key to:', firstStudy.studyKey);",
									"        } else {",
									"            console.error('No studyKey found in first study');",
									"        }",
									"    } else {",
									"        console.error('No studies found in response');",
									"    }",
									"});",
									"",
									"// Validate study properties",
									"if (pm.response.json().data && pm.response.json().data.length > 0) {",
									"    pm.test(\"Study has required properties\", function () {",
									"        const firstStudy = pm.response.json().data[0];",
									"        pm.expect(firstStudy).to.have.property('sponsorKey');",
									"        pm.expect(firstStudy).to.have.property('studyKey');",
									"        pm.expect(firstStudy).to.have.property('studyId');",
									"        pm.expect(firstStudy).to.have.property('studyName');",
									"        pm.expect(firstStudy).to.have.property('studyType');",
									"        pm.expect(firstStudy).to.have.property('dateCreated');",
									"        pm.expect(firstStudy).to.have.property('dateModified');",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Validate required environment variables",
									"const requiredVars = ['apikey', 'securitykey', 'base_url'];",
									"requiredVars.forEach(variable => {",
									"    if (!pm.environment.get(variable)) {",
									"        console.error(`Missing required environment variable: ${variable}`);",
									"    }",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get Study Sites",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/sites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
									"sites"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Study Users",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/records",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"records"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Form Design & Configuration",
			"item": [
				{
					"name": "Get Forms",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/forms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"forms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Variables",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/variables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"variables"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Intervals",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"host": true,
							"accept-encoding": true,
							"connection": true,
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/intervals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"intervals"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Subject Data Management",
			"item": [
				{
					"name": "Get Subjects",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/subjects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"subjects"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Records",
						"event": [
							{
								"listen": "test",
								"script": {
									"type": "text/javascript",
									"exec": [
										"// Test response code",
										"pm.test(\"Status code is 200\", function () {",
										"    pm.response.to.have.status(200);",
										"});",
										"",
										"// Test response structure",
										"pm.test(\"Response has correct structure\", function () {",
										"    const response = pm.response.json();",
										"    pm.expect(response).to.have.property('metadata');",
										"    pm.expect(response).to.have.property('pagination');",
										"    pm.expect(response).to.have.property('data');",
										"});",
										"",
										"// Test metadata fields",
										"pm.test(\"Metadata has required fields\", function () {",
										"    const metadata = pm.response.json().metadata;",
										"    pm.expect(metadata).to.have.property('status');",
										"    pm.expect(metadata).to.have.property('method');",
										"    pm.expect(metadata).to.have.property('path');",
										"    pm.expect(metadata).to.have.property('timestamp');",
										"});",
										"",
										"// Test pagination fields",
										"pm.test(\"Pagination has required fields\", function () {",
										"    const pagination = pm.response.json().pagination;",
										"    pm.expect(pagination).to.have.property('currentPage');",
										"    pm.expect(pagination).to.have.property('size');",
										"    pm.expect(pagination).to.have.property('totalPages');",
										"    pm.expect(pagination).to.have.property('totalElements');",
										"});",
										"",
										"// Test record data structure if records exist",
										"pm.test(\"Records have required fields\", function () {",
										"    const response = pm.response.json();",
										"    if (response.data && response.data.length > 0) {",
										"        const record = response.data[0];",
										"        pm.expect(record).to.have.property('studyKey');",
										"        pm.expect(record).to.have.property('formId');",
										"        pm.expect(record).to.have.property('formKey');",
										"        pm.expect(record).to.have.property('recordId');",
										"        pm.expect(record).to.have.property('recordStatus');",
										"        pm.expect(record).to.have.property('dateCreated');",
										"        pm.expect(record).to.have.property('dateModified');",
										"    }",
										"});"
									]
								}
							}
						],
						"protocolProfileBehavior": {
							"disableBodyPruning": true
						},
						"request": {
							"method": "GET",
							"header": [
								{
									"key": "x-api-key",
									"value": "{{apikey}}",
									"type": "text"
								},
								{
									"key": "x-imn-security-key",
									"value": "{{securitykey}}",
									"type": "text"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"type": "text"
								}
							],
							"url": {
								"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/records",
								"host": [
									"{{base_url}}"
								],
								"path": [
									"api",
									"v1",
									"edc",
									"studies",
									"{{study_key}}",
									"records"
								],
								"query": [
									{
										"key": "page",
										"value": "0",
										"description": "Page number (zero-based)",
										"disabled": true
									},
									{
										"key": "size",
										"value": "25",
										"description": "Number of records per page",
										"disabled": true
									},
									{
										"key": "sort",
										"value": "recordId,ASC",
										"description": "Sort field and direction",
										"disabled": true
									},
									{
										"key": "filter",
										"value": "recordId==5510",
										"description": "Filter records by criteria",
										"disabled": true
									},
									{
										"key": "recordDataFilter",
										"value": "aeterm==Bronchitis",
										"description": "Filter by record data fields",
										"disabled": true
									}
								]
							},
							"description": "Retrieve records for a study with optional filtering and pagination.\n\n## Parameters\n- page: Page number (zero-based)\n- size: Number of records per page (max 500)\n- sort: Sort field and direction (e.g., recordId,ASC)\n- filter: Filter criteria for record fields\n- recordDataFilter: Filter criteria for record data fields\n\n## Examples\n\n### Basic Request\n```http\nGET /api/v1/edc/studies/PHARMADEMO/records\n```\n\n### With Filtering\n```http\nGET /api/v1/edc/studies/PHARMADEMO/records?filter=recordId==5510&recordDataFilter=aeterm==Bronchitis\n```\n\n### With Sorting and Pagination\n```http\nGET /api/v1/edc/studies/PHARMADEMO/records?page=0&size=25&sort=recordId,ASC\n```"
						},
						"response": []
					},
				{
					"name": "Create Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Pre-request Script for Create Subject Record",
									" * Validates and prepares the request payload",
									" */",
									"",
									"// Validate required request body fields",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"const requiredFields = ['formKey', 'siteName', 'subjectKey', 'data'];",
									"",
									"requiredFields.forEach(field => {",
									"    if (!requestBody[0][field]) {",
									"        console.error(`Missing required field: ${field}`);",
									"    }",
									"});",
									"",
									"// Format dates in ISO format",
									"if (requestBody[0].visitDate) {",
									"    const date = new Date(requestBody[0].visitDate);",
									"    requestBody[0].visitDate = date.toISOString().split('T')[0];",
									"}",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Script for Create Subject Record",
									" * Verifies the response and extracts job tracking information",
									" */",
									"",
									"// Verify response structure",
									"pm.test('Response contains job tracking information', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('batchId');",
									"    pm.expect(response).to.have.property('state');",
									"});",
									"",
									"// Save batchId for job status tracking",
									"const response = pm.response.json();",
									"if (response.batchId) {",
									"    pm.environment.set('batchId', response.batchId);",
									"    console.log('Batch ID saved:', response.batchId);",
									"}",
									"",
									"// Additional response validation",
									"pm.test('Job is in valid initial state', () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.state).to.be.oneOf(['created', 'running']);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"formKey\": \"YOUR_FORM_KEY\",\n    \"siteName\": \"YOUR_SITE_NAME\",\n    \"subjectKey\": \"YOUR_SUBJECT_KEY\",\n    \"visitDate\": \"YYYY-MM-DD\",\n    \"data\": {}\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/records",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"records"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Visits",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/visits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"visits"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Data Review & Quality",
			"item": [
				{
					"name": "Get Data Queries",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/queries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"queries"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Record Revisions",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/recordRevisions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"recordRevisions"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data Codings",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/codings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"codings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. System Operations",
			"item": [
				{
					"name": "Get Job Status",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "x-imn-security-key",
								"value": "{{securitykey}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/edc/studies/{{study_key}}/jobs/{{batchId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"edc",
								"studies",
								"{{study_key}}",
								"jobs",
								"{{batchId}}"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "25",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "recordId,ASC",
									"disabled": true
								},
								{
									"key": "filter",
									"value": null,
									"disabled": true
								},
								{
									"key": "recordDataFilter",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Pre-request Script Documentation",
					"/**",
					" * Global Pre-request Script",
					" * This script runs before each request in the collection",
					" * ",
					" * Purpose:",
					" * 1. Validate required environment variables",
					" * 2. Set default headers if not present",
					" * 3. Log request details for debugging",
					" */",
					"",
					"// Validate required environment variables",
					"const requiredVars = ['apikey', 'securitykey', 'study_key'];",
					"requiredVars.forEach(variable => {",
					"    if (!pm.environment.get(variable)) {",
					"        console.error(`Missing required environment variable: ${variable}`);",
					"    }",
					"});",
					"",
					"// Set default headers if not present",
					"if (!pm.request.headers.has('Content-Type')) {",
					"    pm.request.headers.add({",
					"        key: 'Content-Type',",
					"        value: 'application/json'",
					"    });",
					"}",
					"",
					"// Log request details for debugging",
					"console.log('Executing request:', pm.request.url);",
					"console.log('Method:', pm.request.method);",
					"console.log('Headers:', pm.request.headers);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Test Script Documentation",
					"/**",
					" * Global Test Script",
					" * This script runs after each request in the collection",
					" * ",
					" * Purpose:",
					" * 1. Verify response format and status",
					" * 2. Validate response schema",
					" * 3. Check for specific error conditions",
					" * 4. Set environment variables from response data if needed",
					" */",
					"",
					"// Basic response validation",
					"pm.test('Response status code is 200', () => {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test('Response has required headers', () => {",
					"    pm.response.to.have.header('Content-Type');",
					"});",
					"",
					"// Schema validation for common response format",
					"const schema = {",
					"    type: 'object',",
					"    required: ['metadata'],",
					"    properties: {",
					"        metadata: {",
					"            type: 'object',",
					"            required: ['status', 'timestamp']",
					"        }",
					"    }",
					"};",
					"",
					"pm.test('Response matches schema', () => {",
					"    pm.response.to.have.jsonSchema(schema);",
					"});",
					"",
					"// Check for specific error conditions",
					"if (pm.response.code === 401) {",
					"    console.error('Authentication failed - check API credentials');",
					"}",
					"",
					"// Log response details for debugging",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime, 'ms');"
				]
			}
		},
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request Script Documentation",
					"/**",
					" * Global Pre-request Script",
					" * This script runs before each request in the collection",
					" */",
					"",
					"// Validate required environment variables",
					"const requiredVars = ['apikey', 'securitykey'];",
					"requiredVars.forEach(variable => {",
					"    if (!pm.environment.get(variable)) {",
					"        console.error(`Missing required environment variable: ${variable}`);",
					"        throw new Error(`Missing required environment variable: ${variable}`);",
					"    }",
					"});",
					"",
					"// Validate rate limits",
					"const minute = 60 * 1000;",
					"const hour = 60 * minute;",
					"",
					"// Initialize counters if they don't exist",
					"if (!pm.collectionVariables.get('requestCountMinute')) {",
					"    pm.collectionVariables.set('requestCountMinute', '0');",
					"    pm.collectionVariables.set('requestCountHour', '0');",
					"    pm.collectionVariables.set('lastRequestTime', new Date().getTime().toString());",
					"}",
					"",
					"const now = new Date().getTime();",
					"const lastRequest = parseInt(pm.collectionVariables.get('lastRequestTime'));",
					"let requestCountMinute = parseInt(pm.collectionVariables.get('requestCountMinute'));",
					"let requestCountHour = parseInt(pm.collectionVariables.get('requestCountHour'));",
					"",
					"// Reset counters if time windows have passed",
					"if (now - lastRequest > minute) {",
					"    requestCountMinute = 0;",
					"}",
					"if (now - lastRequest > hour) {",
					"    requestCountHour = 0;",
					"}",
					"",
					"// Check rate limits",
					"if (requestCountMinute >= parseInt(pm.collectionVariables.get('rate_limit_minute'))) {",
					"    throw new Error('Rate limit exceeded: Too many requests per minute');",
					"}",
					"if (requestCountHour >= parseInt(pm.collectionVariables.get('rate_limit_hour'))) {",
					"    throw new Error('Rate limit exceeded: Too many requests per hour');",
					"}",
					"",
					"// Update counters",
					"pm.collectionVariables.set('requestCountMinute', (requestCountMinute + 1).toString());",
					"pm.collectionVariables.set('requestCountHour', (requestCountHour + 1).toString());",
					"pm.collectionVariables.set('lastRequestTime', now.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global Test Script",
					"/**",
					" * Runs after each request to validate responses and handle errors",
					" */",
					"",
					"// Basic response validation",
					"pm.test('Response has required headers', () => {",
					"    pm.response.to.have.header('Content-Type', 'application/json');",
					"});",
					"",
					"// Check for specific error conditions",
					"if (pm.response.code === 401) {",
					"    console.error('Authentication failed - check API credentials');",
					"}",
					"",
					"if (pm.response.code === 429) {",
					"    console.error('Rate limit exceeded - Reduce request frequency');",
					"}",
					"",
					"// Validate response format for successful requests",
					"if (pm.response.code === 200) {",
					"    pm.test('Response has required structure', () => {",
					"        const response = pm.response.json();",
					"        pm.expect(response).to.have.property('metadata');",
					"        pm.expect(response.metadata).to.have.property('status');",
					"        pm.expect(response.metadata).to.have.property('timestamp');",
					"    });",
					"}",
					"",
					"// Log response details for debugging",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime, 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://edc.prod.imednetapi.com",
			"type": "string"
		},
		{
			"key": "api_version",
			"value": "v1",
			"type": "string"
		},
		{
			"key": "apikey",
			"value": "",
			"type": "string"
		},
		{
			"key": "securitykey",
			"value": "",
			"type": "string"
		},
		{
			"key": "study_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "page_size",
			"value": "25",
			"type": "string"
		},
		{
			"key": "max_page_size",
			"value": "500",
			"type": "string"
		},
		{
			"key": "date_format",
			"value": "YYYY-MM-DDTHH:mm:ssZ",
			"type": "string"
		},
		{
			"key": "rate_limit_minute",
			"value": "100",
			"type": "string"
		},
		{
			"key": "rate_limit_hour",
			"value": "1000",
			"type": "string"
		}
	]
}